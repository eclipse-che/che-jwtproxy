#
# Copyright (c) 2020 Red Hat, Inc.
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#
# Contributors:
#   Red Hat, Inc. - initial API and implementation
#

name: build

on:
  push:
    branches:
      - 'main'
      - 'v*'
    tags:
      - 'v*'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - 'main'
      - 'v*'
    paths-ignore:
      - '**.md'

jobs:

  go:
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2.3.1
      -
        name: Prepare
        id: prepare
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo ::set-output name=tag_name::${GITHUB_REF#refs/tags/}
          fi
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.13
      -
        name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      -
        name: Go mod
        run: go mod download
      -
        name: Go test
        run: go test -v  ./...
  docker:
    runs-on: ubuntu-20.04
    needs: go
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2.3.1
      -
        name: Prepare
        id: prepare
        run: |
          QUAY_USERNAME=${{secrets.QUAY_USERNAME}}
          IMAGE=quay.io/eclipse/che-jwtproxy
          REPO=quay.io
          DOCKER_PLATFORMS=linux/amd64,linux/s390x,linux/arm64,linux/ppc64le
          VERSION=next

          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi

          TAGS="--tag ${IMAGE}:${VERSION}"
          TAGS_RHEL="--tag ${IMAGE}:${VERSION}-rhel"

          echo ::set-output name=QUAY_USERNAME::${QUAY_USERNAME}
          echo ::set-output name=REPO::${REPO}
          echo ::set-output name=IMAGE::${IMAGE}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${GITHUB_SHA::8} \
            ${TAGS} --file build/dockerfiles/Dockerfile .

          echo ::set-output name=buildx_args_rhel::--platform linux/amd64 \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${GITHUB_SHA::8} \
            ${TAGS_RHEL} --file build/dockerfiles/rhel.Dockerfile .
      -
        name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3.2.0
        with:
          buildx-version: v0.4.1
      -
        name: Docker Buildx (build)
        run: |
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args_rhel }}
      -
        name: Docker Login
        if: success() && github.event_name != 'pull_request' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
        env:
          QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
        run: |
          echo "${QUAY_PASSWORD}" | docker login ${{ steps.prepare.outputs.REPO }} --username "${{ steps.prepare.outputs.QUAY_USERNAME }}" --password-stdin
      -
        name: Docker Buildx (push)
        if: success() && github.event_name != 'pull_request' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
        run: |
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}
      -
        name: Docker Buildx rhel (push)
        if: success() && github.event_name != 'pull_request' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
        run: |
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args_rhel }}
      -
        name: Docker Check Manifest
        if: success() && github.event_name != 'pull_request' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
        run: |
          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.IMAGE }}:${{ steps.prepare.outputs.version }}
      -
        name: Clear
        if: always() && github.event_name != 'pull_request' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
        run: |
          rm -f ${HOME}/.docker/config.json
